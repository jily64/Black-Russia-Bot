import asyncio
import logging, uuid
import sys, json
from os import getenv
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
#exit()

load_dotenv()

TOKEN = getenv("BOT_TOKEN")
SPONSORS = [-1001591752959, -1002563183053]
ADMIN_ID = 7161421601
USER_STATES = {}
TASKS = []


dp = Dispatcher()

kb = [
    [KeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏—Ä—Ç—ã üí≤"),
    KeyboardButton(text="–ú–æ–π –±–∞–ª–∞–Ω—Å üí≥")],
    [KeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –≤–∏—Ä—Ç—ã ü§ù")],
    [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤–∏—Ä—Ç—ã üí±"),
    KeyboardButton(text="–û—Ç–∑—ã–≤—ã –æ –≤—ã–≤–æ–¥–∞—Ö ‚úÖ")],
    [KeyboardButton(text="–•–æ—á—É —Å—Ç–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–º ‚öúÔ∏è"),
    KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—èüíé")],
]
keyboard = ReplyKeyboardMarkup(keyboard=kb)


async def check_sponsor(message: Message):
    if str(message.from_user.id) in USER_STATES:
        USER_STATES.pop(str(message.from_user.id))

    user_id = message.from_user.id
    builder = InlineKeyboardBuilder()

    for id in SPONSORS:
        chat = await bot.get_chat(id)

        builder.row(InlineKeyboardButton(
        text=chat.full_name, url=await bot.export_chat_invite_link(id))
    )


    for id in SPONSORS:
        try:
            chat_member = await bot.get_chat_member(id, user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                
                await message.answer("üñ≤Ô∏è –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ ‚Üì", reply_markup=builder.as_markup())
                return False                

        except Exception as e:
            print(e)

    return True


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    with open("users.json", "r", encoding="UTF-8") as f:
        data_users = json.load(f)

    with open("referals.json", "r", encoding="UTF-8") as f:
        data_referal = json.load(f)

    ref = False
    if len(message.text.split()) > 1:
        if str(message.from_user.id) in data_users and data_users[str(message.from_user.id)]["url_used"] == True:
            pass
        else:
            ref = True
            custom_parameter = message.text.split()[1]
            print(custom_parameter)
            if custom_parameter in data_referal:
                data_users[data_referal[custom_parameter]]["money"] += 50000
                await bot.send_message(int(data_referal[custom_parameter]), f"–ù–æ–≤—ã–π –†–µ—Ñ–µ—Ä–∞–ª!\n–ò–º—è: {message.from_user.full_name}")
                with open("users.json", "w", encoding="UTF-8") as f:
                    json.dump(data_users, f, ensure_ascii=False, indent=4)
            
    if str(message.from_user.id) not in data_users:
        id = str(uuid.uuid4())
        user_data = {
            "url_used": bool(ref),
            "referal": id,
            "money": 0,
            "tasks": []
        }

        data_users[str(message.from_user.id)] = user_data
        data_referal[id] = str(message.from_user.id)

    else:
        data_users[str(message.from_user.id)]["url_used"] = True

    with open("users.json", "w", encoding="UTF-8") as f:
        json.dump(data_users, f, ensure_ascii=False, indent=4)

    with open("referals.json", "w", encoding="UTF-8") as f:
        json.dump(data_referal, f, ensure_ascii=False, indent=4)

        

    if not await check_sponsor(message):
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ ¬´FarmVirt¬ª! üëã\n\n–ò–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ Matreshka RP, –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ üë§", reply_markup=keyboard)

@dp.message(F.text == "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏—Ä—Ç—ã üí≤")
async def earn(message: Message):
    if not await check_sponsor(message):
        return
    
    with open("users.json", "r", encoding="UTF-8") as f:
        data_users = json.load(f)

    url = data_users[str(message.from_user.id)]["referal"]
    await message.reply(f"–ü–æ–ª—É—á–∞–π –ø–æ 50.000 –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –∑–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –¥—Ä—É–≥–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ üë§\n\n–°–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –≥—Ä—É–ø–ø–∞—Ö –∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞—Ö üåê\n\n–ß–µ–º –±–æ–ª—å—à–µ –≤—ã –ø—Ä–∏–≤–µ–¥–µ—Ç–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å üÜô\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/Damkrad_bot?start={url}")

@dp.message(F.text == "–ú–æ–π –±–∞–ª–∞–Ω—Å üí≥")
async def balance(message: Message):
    if not await check_sponsor(message):
        return
    
    with open("users.json", "r", encoding="UTF-8") as f:
        data_users = json.load(f)

    money = data_users[str(message.from_user.id)]["money"]
    await message.reply(f"–û–≥–æ! –í—ã –ø—Ä–∏–≤–µ–ª–∏ —Ç–∞–∫ –º–Ω–æ–≥–æ –¥—Ä—É–∑–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ ‚ö°Ô∏è\n\nüìã –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: " + str(money))


@dp.message(F.text == "–ü—Ä–æ–¥–∞—Ç—å/–∫—É–ø–∏—Ç—å –≤–∏—Ä—Ç—ã ü§ù")
async def buy_sell(message: Message):
    if not await check_sponsor(message):
        return
    
    await message.reply(f"–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –≤–∏—Ä—Ç—ã, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ @Magnat_77 –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É ‚úÖ\n\n–£ –Ω–∞—Å —Ç–∞–∫ –∂–µ –µ—Å—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –ø–æ–∫—É–ø–æ–∫ –≤–∏—Ä—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –≤–∞—Å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è @otzivi_magnat —Ç–∞–º üëÄ\n\n–ü—Ä–æ–¥–∞–∂–∞ –∏ —Å–∫—É–ø–∫–∞ –≤–∏—Ä—Ç–æ–≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç 1.000.000 –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã (–Ω–µ –º–µ–Ω—å—à–µ) ‚ùóÔ∏è")

@dp.message(F.text == "–û—Ç–∑—ã–≤—ã –æ –≤—ã–≤–æ–¥–∞—Ö ‚úÖ")
async def reviews(message: Message):
    if not await check_sponsor(message):
        return
    
    await message.reply(f"–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–∏–≤ –æ–±–º–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∏–º–µ–Ω–Ω–æ —É –Ω–∞—Å –º—ã –º–æ–∂–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —Å–ø–æ–∫–æ–π–Ω–æ ü§ó\n\nüßë‚Äçüíª –ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –≤—ã–≤–æ–¥–∞—Ö –≤–∏—Ä—Ç–æ–≤:\n\n@otizivi_vivod_magnat")

@dp.message(F.text == "–•–æ—á—É —Å—Ç–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–º ‚öúÔ∏è")
async def sponsor(message: Message):
    if not await check_sponsor(message):
        return
    
    await message.reply(f"–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –•–æ—á—É —Å—Ç–∞—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–æ–º, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç:\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –Ω–∞—à—É —É—Å–ª—É–≥—É ¬´–°–ø–æ–Ω—Å–æ—Ä¬ª, –æ–Ω–∞ –¥–∞—ë—Ç –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–¥–æ—Ä–æ–≥—É—é, –∏ –∂–∏–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª üë•\n\n–í –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ ‚úÖ\n\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Å–ª—É–≥—É ¬´–°–ø–æ–Ω—Å–æ—Ä¬ª –≤—ã –º–æ–∂–µ—Ç–µ —É @Magnat_77 (—Å–≤–µ—Ä—è–π—Ç–µ —é–∑–µ—Ä) ‚ùóÔ∏è")

@dp.message(F.text == "–í—ã–≤–µ—Å—Ç–∏ –≤–∏—Ä—Ç—ã üí±")
async def sponsor(message: Message):
    if not await check_sponsor(message):
        return
    
    USER_STATES[str(message.from_user.id)] = {
        "state": "server",
        "server": None,
        "bank": None,
        "virts": None
    }
    

    await message.reply(f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ‚Üì")

@dp.message(F.text == "–ó–∞–¥–∞–Ω–∏—èüíé")
async def virt_giver(message: Message):
    print(123)
    if not await check_sponsor(message):
        return
    user_id = message.from_user.id

    with open("users.json", "r", encoding="UTF-8") as f:
        data_user = json.load(f)
    
    for task in TASKS:
        print(task)
        if task not in data_user[str(user_id)]["tasks"]:
            print(1)
            chat_member = await bot.get_chat_member(task, user_id)
            chat = await bot.get_chat(task)
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text=chat.full_name, url=await bot.export_chat_invite_link(task)))
            builder.row(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_task"))
            await message.reply(f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª\n\n–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: +50000 –≤–∏—Ä—Ç–æ–≤", reply_markup=builder.as_markup())
            return
            
    await message.reply(f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç. –í—ã –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ.", reply_markup=keyboard)
    



@dp.callback_query()
async def virt_giver(call: CallbackQuery):
    print("callback")
    message = call.message
    user_id = call.from_user.id
    
    with open("users.json", "r", encoding="UTF-8") as f:
        data_user = json.load(f)
    
    for task in TASKS:
        if task not in data_user[str(user_id)]["tasks"]:
            chat_member = await bot.get_chat_member(task, user_id)
            if chat_member.status in ['member', 'administrator', 'creator']:
                
                data_user[str(user_id)]["tasks"].append(task)
                data_user[str(user_id)]["money"]+=50000

                with open("users.json", "w", encoding="UTF-8") as f:
                    json.dump(data_user, f, ensure_ascii=False, indent=4)

                await message.reply(f"–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: +50000 –≤–∏—Ä—Ç–æ–≤", reply_markup=keyboard)
                return
    await message.reply(f"–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ", reply_markup=keyboard)
    
                

                



@dp.message()
async def virt_giver(message: Message):
    user_id = message.from_user.id
    if str(user_id) not in USER_STATES:
        return
    
    if USER_STATES[str(user_id)]["state"] == "server":
        try:
            int(message.text)
        except:
            await message.reply(f"–ù–æ–º–µ—Ä –°–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return
        
        USER_STATES[str(user_id)]["server"] = int(message.text)
        USER_STATES[str(user_id)]["state"] = "bank"
        await message.reply(f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ ‚Üì")
    
    elif USER_STATES[str(user_id)]["state"] == "bank":
        try:
            int(message.text)
        except:
            await message.reply(f"–ù–æ–º–µ—Ä –ë–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return
        
        USER_STATES[str(user_id)]["bank"] = int(message.text)
        USER_STATES[str(user_id)]["state"] = "virt"
        await message.reply(f"üí∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤–∏—Ä—Ç–æ–≤: ")

    elif USER_STATES[str(user_id)]["state"] == "virt":
        try:
            int(message.text)
        except:
            await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return
        
        with open("users.json", "r", encoding="UTF-8") as f:
            data_users = json.load(f)
        print(int(message.text) < 10**6)
        if data_users[str(user_id)]["money"] < int(message.text) or int(message.text) < 10**6:
            await message.reply(f"–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–∏–¥–∏–º–æ –≤—ã –ø—Ä–∏–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥—Ä—É–∑–µ–π –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ 1.000.000\n\nüìã –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {data_users[str(user_id)]["money"]}", reply_markup=keyboard)
            USER_STATES.pop(str(user_id))
            return

        USER_STATES[str(user_id)]["virts"] = int(message.text)
        USER_STATES[str(user_id)]["state"] = "none"
        
        message_to_admin = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤–∏—Ä—Ç–æ–≤:\n\n–°–µ—Ä–≤–µ—Ä: {USER_STATES[str(user_id)]["server"]}\n–ë–∞–Ω–∫: {USER_STATES[str(user_id)]["bank"]}\n–ö–æ–ª-–≤–æ –≤–∏—Ä—Ç–æ–≤: {USER_STATES[str(user_id)]["virts"]}"
        await bot.send_message(ADMIN_ID, message_to_admin)

        USER_STATES.pop(str(user_id))

        data_users[str(user_id)]["money"] -= int(message.text)

        with open("users.json", "w", encoding="UTF-8") as f:
            json.dump(data_users, f, ensure_ascii=False, indent=4)

        await message.reply("–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤–∏—Ä—Ç–æ–≤ –±—ã–ª–∞ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ –Ω–µ–¥–µ–ª–∏ (–æ–±—ã—á–Ω–æ –∑–∞ —Å—É—Ç–∫–∏) ‚úÖ")


async def main() -> None:
    global bot
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)



if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())